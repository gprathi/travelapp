{"ast":null,"code":"import _objectSpread from \"/home/boring/travelapp/amadeus-airport-city-search-mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/boring/travelapp/amadeus-airport-city-search-mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/boring/travelapp/amadeus-airport-city-search-mern/client/src/components/search-autocomplete.jsx\";\nimport React, { useCallback, useEffect } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport axios from 'axios';\nimport { getAmadeusData } from \"../api/amadeus.api\";\nimport { debounce } from \"lodash\";\n\nconst SearchAutocomplete = props => {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        options = _React$useState4[0],\n        setOptions = _React$useState4[1];\n\n  const _React$useState5 = React.useState(''),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        search = _React$useState6[0],\n        setSearch = _React$useState6[1];\n\n  const _React$useState7 = React.useState(''),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        keyword = _React$useState8[0],\n        setKeyword = _React$useState8[1];\n\n  const _React$useState9 = React.useState(false),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        loading = _React$useState10[0],\n        setLoading = _React$useState10[1]; // Configure options format for proper displaying on the UI\n\n\n  const names = options.map(i => ({\n    type: i.subType,\n    name: i.name\n  })); // Debounce func prevents extra unwanted keystrokes, when user triggers input events \n\n  const debounceLoadData = useCallback(debounce(setKeyword, 1000), []);\n  useEffect(() => {\n    debounceLoadData(search);\n  }, [search]); // Same example as in *SearchRoot* component\n\n  React.useEffect(() => {\n    setLoading(true);\n\n    const _getAmadeusData = getAmadeusData(_objectSpread({}, props.search, {\n      page: 0,\n      keyword\n    })),\n          out = _getAmadeusData.out,\n          source = _getAmadeusData.source;\n\n    out.then(res => {\n      if (!res.data.code) {\n        setOptions(res.data.data);\n      }\n\n      setLoading(false);\n    }).catch(err => {\n      axios.isCancel(err);\n      setOptions([]);\n      setLoading(false);\n    });\n    return () => {\n      source.cancel();\n    };\n  }, [keyword]); // Desctructuring our props\n\n  const _props$search = props.search,\n        city = _props$search.city,\n        airport = _props$search.airport;\n  const label = city && airport ? \"City and Airports\" : city ? \"City\" : airport ? \"Airports\" : \"\";\n  return (// This is Material-UI component that also has it's own props\n    React.createElement(React.Fragment, null, React.createElement(Autocomplete, {\n      id: \"asynchronous-demo\",\n      style: {\n        width: 300,\n        marginBottom: \"1rem\"\n      },\n      open: open,\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      getOptionSelected: (option, value) => option.name === value.name && option.type === value.type,\n      onChange: (e, value) => {\n        if (value && value.name) {\n          props.setSearch(p => _objectSpread({}, p, {\n            keyword: value.name,\n            page: 0\n          }));\n          setSearch(value.name);\n          return;\n        }\n\n        setSearch(\"\");\n        props.setSearch(p => _objectSpread({}, p, {\n          keyword: \"a\",\n          page: 0\n        }));\n      },\n      getOptionLabel: option => {\n        return option.name;\n      },\n      options: names,\n      loading: loading,\n      renderInput: params => {\n        return React.createElement(TextField, {\n          label: label,\n          fullWidth: true,\n          onChange: e => {\n            e.preventDefault();\n            setSearch(e.target.value);\n          },\n          variant: \"outlined\",\n          inputProps: _objectSpread({}, params.inputProps, {\n            value: search\n          }),\n          InputProps: _objectSpread({}, params.InputProps, {\n            endAdornment: React.createElement(React.Fragment, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102\n              },\n              __self: this\n            }, loading ? React.createElement(CircularProgress, {\n              color: \"inherit\",\n              size: 20,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }) : null, params.InputProps.endAdornment)\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }))\n  );\n};\n\nexport default SearchAutocomplete;","map":{"version":3,"sources":["/home/boring/travelapp/amadeus-airport-city-search-mern/client/src/components/search-autocomplete.jsx"],"names":["React","useCallback","useEffect","Autocomplete","TextField","CircularProgress","axios","getAmadeusData","debounce","SearchAutocomplete","props","useState","open","setOpen","options","setOptions","search","setSearch","keyword","setKeyword","loading","setLoading","names","map","i","type","subType","name","debounceLoadData","page","out","source","then","res","data","code","catch","err","isCancel","cancel","city","airport","label","width","marginBottom","option","value","e","p","params","preventDefault","target","inputProps","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport axios from 'axios'\nimport { getAmadeusData } from \"../api/amadeus.api\";\nimport { debounce } from \"lodash\"\n\nconst SearchAutocomplete = (props) => {\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState([]);\n  const [search, setSearch] = React.useState('')\n  const [keyword, setKeyword] = React.useState('')\n  const [loading, setLoading] = React.useState(false)\n\n  // Configure options format for proper displaying on the UI\n  const names = options.map(i => ({ type: i.subType, name: i.name }));\n\n  // Debounce func prevents extra unwanted keystrokes, when user triggers input events \n  const debounceLoadData = useCallback(debounce(setKeyword, 1000), []);\n\n  useEffect(() => {\n    debounceLoadData(search);\n  }, [search]);\n\n  // Same example as in *SearchRoot* component\n  React.useEffect(() => {\n\n    setLoading(true)\n    const { out, source } = getAmadeusData({ ...props.search, page: 0, keyword });\n\n    out.then(res => {\n      if (!res.data.code) {\n        setOptions(res.data.data);\n      }\n      setLoading(false)\n    }).catch(err => {\n      axios.isCancel(err);\n      setOptions([]);\n      setLoading(false)\n\n    });\n\n    return () => {\n      source.cancel()\n    };\n  }, [keyword]);\n\n  // Desctructuring our props\n  const { city, airport } = props.search\n\n  const label = city && airport ? \"City and Airports\" : city ? \"City\" : airport ? \"Airports\" : \"\"\n\n  return (\n    // This is Material-UI component that also has it's own props\n    <>\n      <Autocomplete\n        id=\"asynchronous-demo\"\n        style={{ width: 300, marginBottom: \"1rem\" }}\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionSelected={(option, value) =>\n          option.name === value.name && option.type === value.type\n        }\n        onChange={(e, value) => {\n          if (value && value.name) {\n            props.setSearch((p) => ({ ...p, keyword: value.name, page: 0 }))\n            setSearch(value.name)\n            return;\n          }\n          setSearch(\"\")\n          props.setSearch((p) => ({ ...p, keyword: \"a\", page: 0 }))\n\n        }}\n        getOptionLabel={option => {\n          return option.name;\n        }}\n        options={names}\n        loading={loading}\n        renderInput={params => {\n          return (\n            <TextField\n              label={label}\n              fullWidth\n              onChange={e => {\n                e.preventDefault();\n                setSearch(e.target.value);\n              }}\n              variant=\"outlined\"\n              inputProps={{\n                ...params.inputProps,\n                value: search\n              }}\n              InputProps={{\n                ...params.InputProps,\n                endAdornment: (\n                  <React.Fragment>\n                    {loading ? (\n                      <CircularProgress color=\"inherit\" size={20} />\n                    ) : null}\n                    {params.InputProps.endAdornment}\n                  </React.Fragment>\n                )\n              }}\n            />\n          );\n        }}\n      />\n    </>\n  )\n};\n\nexport default SearchAutocomplete;\n"]},"metadata":{},"sourceType":"module"}